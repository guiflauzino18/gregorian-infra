name: "Deploy Infra Gregorian"

# Variáveis necessárias para execução.
on:
    workflow_call:
        inputs:
            environment: #Variavel que define o tipo de ambiente. OBS o valor deve ser dev prod ou nome e outra pasta que estiver dentro de /infra
                type: string
                required: true
            aws-assume-tole-arn: #ARN da Role que permite o GitHub fazer chamadas à AWS
                type: string
                required: false
            aws-region: #Região da AWS que o GitHub Actions atuará
                type: string
                required: false
            aws-bucket-statefile: # Nome do Bucket que guardará o statefile do terraform
                type: string
                required: false
            destroy: # Variavel quando quisermos fazer o destroy
                type: boolean
                required: true

#Jobs que serão executadas
jobs:
    terraform:
        runs-on: ubuntu-latest #SO que será usado para execução
        defaults:
            run:
              shell: bash

        steps:
            - name: Checkout Code #Checa o código
              uses: actions/checkout@v4

            - name: Setup Terraform # Instala Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.9.8

            - name: Configure AWS Credentials #Configura conexão com AWS
              uses: aws-actions/configure-aws-credentials@v4
              with:
                    role-to-assume: ${{secrets.AWS_ROLE_ARN}} #${inputs.aws-assume-tole-arn}
                    role-session-name: GitHub_Actions_Deploy_Gregorian_Infra
                    aws-region: "${{secrets.AWS_REGION}}" #${inputs.aws-region}}

            - name: Terraform Init #Entra na pasta dev ou prod de acordo com a o valor da variavel passada e executa terraform init 
              run: cd infra/env/${{inputs.environment}} && terraform init 
                  -backend-config="bucket=${{inputs.aws-bucket-statefile}}"  
                  -backend-config="key=${{inputs.environment}}/${{github.event.repository.name}}"
                  -backend-config="region=${{secrets.AWS_REGION}}"

            - name: Terraform Validate # Executa terraform validate
              run: terraform validate

              #Se destroy for true executa terraform destroy
            - name: Terraform Destroy
              if: inputs.destroy == true
              id: terraform-destroy
              run: cd infra/env/${{inputs.environment}} &&
                terraform destroy -var-file="./terraform.tfvars" -auto-approve

            - name: Terraform Plan #Executa terraform plan se destroy != true
              if: inputs.destroy != true
              run: cd infra/env/${{inputs.environment}} &&
                terraform plan -var-file="./terraform.tfvars" \
                -var="aws-region=${{secrets.AWS_REGION}}" \
                -var="aws-acount-id=${{secrets.AWS_ACCOUNT_ID}}" \
                -var="rds-db-name=${{secrets.DB_NAME}}" \
                -var="rds-db-username=${{secrets.DB_USERNAME}}" \
                -var="rds-db-password=${{secrets.DB_PASSWORD}}" \
                -var="bucket=${{secrets.AWS_BUCKET}}" \
                -out=${{inputs.environment}}.plan \
                #secrets são definidas no github

            - name: Terraform Apply
              if: inputs.destroy != true
              run: cd infra/env/${{inputs.environment}} &&
                terraform apply "${{inputs.environment}}.plan"

